function init(self)
	--msg.post(".", "disable")
	msg.post("victory", "disable")
	msg.post("gameover", "disable")
	go.set("#sprite", "tint.w", 0)
	go.set(".", "position.y", 800)
	canMove = false
	input = vmath.vector3(0,0,0)
	pos = vmath.vector3(640, 360, 1)
	velocity = vmath.vector3()
	wind = vmath.vector3()
	windSpeed = 0
	time = 0
	timeSec = 0
	lastTimeSec = 0
	--secondTimeSec = 0
	thirdTimeSec = 0
	lastVelocity = vmath.vector3()
	secondVelocity = vmath.vector3()
	thirdVelocity = vmath.vector3()
	vi = 0 --neither, lost, won
	-- Add initialization code here
	-- Remove this function if not needed
end
function canMoveFunc()
	msg.post("victory", "disable")
	msg.post("gameover", "disable")
	
	canMove = true
end
function genl()
	clearFactoryObjects = false
	msg.post("/generator#script", "generate")
end
function regen()
	if vi == 1 then
		msg.post("gameover", "enable")
		sound.play("/game#lose")
	end
	vi = 0
	clearFactoryObjects = true
	go.set("#sprite", "tint.w", 0)
	go.set(".", "position.y", 800)
	canMove = false
	input = vmath.vector3(0,0,0)
	pos = vmath.vector3(640, 360, 1)
	velocity = vmath.vector3()
	wind = vmath.vector3()
	windSpeed = 0
	time = 0
	timeSec = 0
	lastTimeSec = 0
	--secondTimeSec = 0
	thirdTimeSec = 0
	playerSpeedModifier = 1.0
	lastVelocity = vmath.vector3()
	secondVelocity = vmath.vector3()
	thirdVelocity = vmath.vector3()
	go.set_position(vmath.vector3(640, 800, 0))
	stopA()
	loopingAudio()
	go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, 360, go.EASING_INOUTSINE, 2)
	go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_INOUTSINE, 2)
	timer.delay(1, false, genl)
	timer.delay(2, false, canMoveFunc)
end
function death(reason)
	print("died of "..reason)
	vi = 1
end
function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end
function update(self, dt)
	if playerSpeedModifier == nil then
		print("reassined psm")
		playerSpeedModifier = 1.0
	end
	if canMove then
		time = time + dt
		msg.post("/timer#gui", "set", { time = math.floor(time * 100 + 0.5) / 100; } )
	end
	if vmath.length_sqr(input) > 1 then
		input = vmath.normalize(input)
	end
	timeSec = math.floor(time)
	--print(timeSec)
	if lastTimeSec < timeSec then
		lastTimeSec = timeSec
		--secondTimeSec = timeSec - 1
		thirdTimeSec = timeSec - 2
		thirdVelocity = secondVelocity
		secondVelocity = lastVelocity
		lastVelocity = velocity
		--wind.x = lastVelocity.x
		--pprint(velocity)
	end
	if canMove then
		if input ~= vmath.vector3(0, 0, 0) then
			print(playerSpeedModifier)
			if playerSpeedModifier < 0.95 and playerSpeedModifier * 1.01 < 1 then
				playerSpeedModifier = playerSpeedModifier * 1.01
			else
				playerSpeedModifier = 1.0
			end
		else
			if playerSpeedModifier > 0.0 and playerSpeedModifier * 0.99 < 0.0 then
				playerSpeedModifier = playerSpeedModifier * 0.99
			else
				playerSpeedModifier = 0.0
			end
		end
		windSpeed = math.abs(wind.x) * math.abs(wind.y) - playerSpeedModifier
		
		local acceleration = input * 200

		local dv = acceleration * dt
		local v0 = velocity
		local v1 = velocity + dv
		local movement = (v0 + v1 - (3 * wind)) * dt * 0.25

		local p = go.get_position()
		go.set_position(p + movement)

		velocity = v1
		input = vmath.vector3(0, 0, 0)
		if p.x > 1350 and canMove then
			regen()
			vi = 1
		elseif p.x < -75 and canMove then
			regen()
			vi = 1
		elseif p.y > 750 and canMove then
			regen()
			vi = 1
		elseif p.y < -75 and canMove then
			regen()
			vi = 1
		end
	end
	--print(p)
	
end
function loopingAudio()
	sound.play("#sound"..math.random(1,5))
	timer.delay(18, false, loopingAudio)
end
function stopA()
	sound.stop("sound1")
	sound.stop("sound2")
	sound.stop("sound3")
	sound.stop("sound4")
	sound.stop("sound5")
end
function startGame()
	msg.post("/dirtblock", "disable")
	msg.post("/generator#script", "generate")
	msg.post("/cloud_factory#script", "start")
	msg.post(".", "acquire_input_focus")
	msg.post(".", "acquire_camera_focus")
	canMove = true
	sound.stop("/game#menu")
	loopingAudio()
end
function on_message(self, message_id, message, sender)
	--print("msgtoplayer"..message_id)
	--pprint("msg reads: ")
	--pprint(message)
	if message_id == hash("enable") then
		--msg.post("/controller#controller", "show_map")
		
		print("showing player")
		go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, 360, go.EASING_INOUTSINE, 2)
		go.animate("#sprite", "tint.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_INOUTSINE, 2)
		timer.delay(1, false, startGame)
	elseif message_id == hash("collision_response") and canMove then  -- <4>
		if message.other_group == hash("portal") then  -- <5>
			print("collided with hash portal")
			print(message.other_group)
			pprint(message)
			--go.delete(message.other_id)
			go.set(message.other_id, "tint", vmath.vector4(1, 0, 0, 1))
			canMove = false
			vi = 2
			--msg.post("victory", "enable")
			--sound.play("/game#win")
			--http.request("https://ScorespaceScoreboardServer.grify.repl.co/", "POST", post_result, headers, "addscore|"..username.."|"..math.floor(time * 100 + 0.5) / 100)
			timer.delay(3, false, regen)
		elseif message.other_group == hash("default") then
			--velocity = 0.9 * velocity --bounce and stick
			--velocity = -velocity
			--pprint("velocity"..velocity)
			--pprint(velocity)
			a = go.get_position(".")
			
			if(velocity.x > 0) then
				a.x = a.x-20
			elseif velocity.x < 0 then
				a.x = a.x+20
			end
			if velocity.y > 0 then
				a.y = a.y-20
			elseif velocity.y < 0 then
				a.y = a.y+20
			end
			
			--a.x = 
			--go.set_position()
			--go.set_position(go.get_position() - velocity) --teleport up
			
		else
			pprint(message.other_group)
		end
	elseif message_id == hash("loopingAudio") then
		loopingAudio()
	end
end

function on_input(self, action_id, action)
	if action_id == hash("d") and canMove then
		input.x = 0.9
	elseif action_id == hash("w") and canMove or action_id == hash("space") and canMove then
		input.y = 1
	elseif action_id == hash("a") and canMove then
		input.x = -2
	elseif action_id == hash("s") and canMove then
		input.y = -1
		--no can do, amigo
	elseif action_id == hash("debug") then
		go.set_position(vmath.vector3(0, 0, 1), "/player")
		print("centered?")
	elseif action_id == hash("r") and canMove then
		print(portalcords)
		regen()
		vi = 1
	end
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
